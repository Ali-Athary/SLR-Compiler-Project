# Generated from E:/University/Semester6/Compiler/SLR-Compiler-Project/Grammar/Slr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,378,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,
        290,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,3,22,307,8,22,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,3,23,317,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,3,24,328,8,24,1,25,4,25,331,8,25,11,25,12,25,332,1,26,1,26,
        1,27,1,27,1,27,1,27,5,27,341,8,27,10,27,12,27,344,9,27,1,27,1,27,
        1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,5,32,
        360,8,32,10,32,12,32,363,9,32,1,32,1,32,1,33,1,33,1,33,3,33,370,
        8,33,1,34,4,34,373,8,34,11,34,12,34,374,1,34,1,34,0,0,35,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,4,1,
        0,48,57,1,0,34,34,1,0,10,10,3,0,9,9,13,13,32,32,387,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,78,
        1,0,0,0,5,85,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,104,1,0,0,0,13,
        107,1,0,0,0,15,119,1,0,0,0,17,127,1,0,0,0,19,144,1,0,0,0,21,154,
        1,0,0,0,23,164,1,0,0,0,25,172,1,0,0,0,27,182,1,0,0,0,29,189,1,0,
        0,0,31,200,1,0,0,0,33,215,1,0,0,0,35,229,1,0,0,0,37,236,1,0,0,0,
        39,243,1,0,0,0,41,260,1,0,0,0,43,289,1,0,0,0,45,306,1,0,0,0,47,316,
        1,0,0,0,49,327,1,0,0,0,51,330,1,0,0,0,53,334,1,0,0,0,55,336,1,0,
        0,0,57,347,1,0,0,0,59,349,1,0,0,0,61,351,1,0,0,0,63,353,1,0,0,0,
        65,355,1,0,0,0,67,369,1,0,0,0,69,372,1,0,0,0,71,72,5,116,0,0,72,
        73,5,111,0,0,73,74,5,112,0,0,74,75,5,105,0,0,75,76,5,99,0,0,76,77,
        5,32,0,0,77,2,1,0,0,0,78,79,5,115,0,0,79,80,5,101,0,0,80,81,5,97,
        0,0,81,82,5,114,0,0,82,83,5,99,0,0,83,84,5,104,0,0,84,4,1,0,0,0,
        85,86,5,113,0,0,86,87,5,117,0,0,87,88,5,101,0,0,88,89,5,114,0,0,
        89,90,5,121,0,0,90,6,1,0,0,0,91,92,5,44,0,0,92,8,1,0,0,0,93,94,5,
        121,0,0,94,95,5,101,0,0,95,96,5,97,0,0,96,97,5,114,0,0,97,98,5,95,
        0,0,98,99,5,114,0,0,99,100,5,97,0,0,100,101,5,110,0,0,101,102,5,
        103,0,0,102,103,5,101,0,0,103,10,1,0,0,0,104,105,5,116,0,0,105,106,
        5,111,0,0,106,12,1,0,0,0,107,108,5,109,0,0,108,109,5,97,0,0,109,
        110,5,120,0,0,110,111,5,95,0,0,111,112,5,114,0,0,112,113,5,101,0,
        0,113,114,5,115,0,0,114,115,5,117,0,0,115,116,5,108,0,0,116,117,
        5,116,0,0,117,118,5,115,0,0,118,14,1,0,0,0,119,120,5,102,0,0,120,
        121,5,105,0,0,121,122,5,108,0,0,122,123,5,116,0,0,123,124,5,101,
        0,0,124,125,5,114,0,0,125,126,5,115,0,0,126,16,1,0,0,0,127,128,5,
        101,0,0,128,129,5,120,0,0,129,130,5,99,0,0,130,131,5,108,0,0,131,
        132,5,117,0,0,132,133,5,100,0,0,133,134,5,101,0,0,134,135,5,95,0,
        0,135,136,5,107,0,0,136,137,5,101,0,0,137,138,5,121,0,0,138,139,
        5,119,0,0,139,140,5,111,0,0,140,141,5,114,0,0,141,142,5,100,0,0,
        142,143,5,115,0,0,143,18,1,0,0,0,144,145,5,109,0,0,145,146,5,105,
        0,0,146,147,5,110,0,0,147,148,5,95,0,0,148,149,5,112,0,0,149,150,
        5,97,0,0,150,151,5,103,0,0,151,152,5,101,0,0,152,153,5,115,0,0,153,
        20,1,0,0,0,154,155,5,108,0,0,155,156,5,97,0,0,156,157,5,110,0,0,
        157,158,5,103,0,0,158,159,5,117,0,0,159,160,5,97,0,0,160,161,5,103,
        0,0,161,162,5,101,0,0,162,163,5,115,0,0,163,22,1,0,0,0,164,165,5,
        97,0,0,165,166,5,110,0,0,166,167,5,97,0,0,167,168,5,108,0,0,168,
        169,5,121,0,0,169,170,5,122,0,0,170,171,5,101,0,0,171,24,1,0,0,0,
        172,173,5,115,0,0,173,174,5,117,0,0,174,175,5,109,0,0,175,176,5,
        109,0,0,176,177,5,97,0,0,177,178,5,114,0,0,178,179,5,105,0,0,179,
        180,5,122,0,0,180,181,5,101,0,0,181,26,1,0,0,0,182,183,5,109,0,0,
        183,184,5,101,0,0,184,185,5,116,0,0,185,186,5,104,0,0,186,187,5,
        111,0,0,187,188,5,100,0,0,188,28,1,0,0,0,189,190,5,109,0,0,190,191,
        5,97,0,0,191,192,5,120,0,0,192,193,5,95,0,0,193,194,5,108,0,0,194,
        195,5,101,0,0,195,196,5,110,0,0,196,197,5,103,0,0,197,198,5,116,
        0,0,198,199,5,104,0,0,199,30,1,0,0,0,200,201,5,101,0,0,201,202,5,
        120,0,0,202,203,5,116,0,0,203,204,5,114,0,0,204,205,5,97,0,0,205,
        206,5,99,0,0,206,207,5,116,0,0,207,208,5,95,0,0,208,209,5,102,0,
        0,209,210,5,105,0,0,210,211,5,101,0,0,211,212,5,108,0,0,212,213,
        5,100,0,0,213,214,5,115,0,0,214,32,1,0,0,0,215,216,5,107,0,0,216,
        217,5,101,0,0,217,218,5,121,0,0,218,219,5,119,0,0,219,220,5,111,
        0,0,220,221,5,114,0,0,221,222,5,100,0,0,222,223,5,95,0,0,223,224,
        5,99,0,0,224,225,5,108,0,0,225,226,5,111,0,0,226,227,5,117,0,0,227,
        228,5,100,0,0,228,34,1,0,0,0,229,230,5,114,0,0,230,231,5,101,0,0,
        231,232,5,112,0,0,232,233,5,111,0,0,233,234,5,114,0,0,234,235,5,
        116,0,0,235,36,1,0,0,0,236,237,5,102,0,0,237,238,5,111,0,0,238,239,
        5,114,0,0,239,240,5,109,0,0,240,241,5,97,0,0,241,242,5,116,0,0,242,
        38,1,0,0,0,243,244,5,105,0,0,244,245,5,110,0,0,245,246,5,99,0,0,
        246,247,5,108,0,0,247,248,5,117,0,0,248,249,5,100,0,0,249,250,5,
        101,0,0,250,251,5,95,0,0,251,252,5,109,0,0,252,253,5,101,0,0,253,
        254,5,116,0,0,254,255,5,97,0,0,255,256,5,100,0,0,256,257,5,97,0,
        0,257,258,5,116,0,0,258,259,5,97,0,0,259,40,1,0,0,0,260,261,5,111,
        0,0,261,262,5,117,0,0,262,263,5,116,0,0,263,264,5,112,0,0,264,265,
        5,117,0,0,265,266,5,116,0,0,266,267,5,95,0,0,267,268,5,112,0,0,268,
        269,5,97,0,0,269,270,5,116,0,0,270,271,5,104,0,0,271,42,1,0,0,0,
        272,273,5,34,0,0,273,274,5,103,0,0,274,275,5,112,0,0,275,276,5,116,
        0,0,276,277,5,45,0,0,277,278,5,52,0,0,278,290,5,34,0,0,279,280,5,
        34,0,0,280,281,5,116,0,0,281,282,5,101,0,0,282,283,5,120,0,0,283,
        284,5,116,0,0,284,285,5,114,0,0,285,286,5,97,0,0,286,287,5,110,0,
        0,287,288,5,107,0,0,288,290,5,34,0,0,289,272,1,0,0,0,289,279,1,0,
        0,0,290,44,1,0,0,0,291,292,5,34,0,0,292,293,5,109,0,0,293,294,5,
        97,0,0,294,295,5,114,0,0,295,296,5,107,0,0,296,297,5,100,0,0,297,
        298,5,111,0,0,298,299,5,119,0,0,299,300,5,110,0,0,300,307,5,34,0,
        0,301,302,5,34,0,0,302,303,5,112,0,0,303,304,5,100,0,0,304,305,5,
        102,0,0,305,307,5,34,0,0,306,291,1,0,0,0,306,301,1,0,0,0,307,46,
        1,0,0,0,308,309,5,34,0,0,309,310,5,101,0,0,310,311,5,110,0,0,311,
        317,5,34,0,0,312,313,5,34,0,0,313,314,5,102,0,0,314,315,5,97,0,0,
        315,317,5,34,0,0,316,308,1,0,0,0,316,312,1,0,0,0,317,48,1,0,0,0,
        318,319,5,116,0,0,319,320,5,114,0,0,320,321,5,117,0,0,321,328,5,
        101,0,0,322,323,5,102,0,0,323,324,5,97,0,0,324,325,5,108,0,0,325,
        326,5,115,0,0,326,328,5,101,0,0,327,318,1,0,0,0,327,322,1,0,0,0,
        328,50,1,0,0,0,329,331,3,53,26,0,330,329,1,0,0,0,331,332,1,0,0,0,
        332,330,1,0,0,0,332,333,1,0,0,0,333,52,1,0,0,0,334,335,7,0,0,0,335,
        54,1,0,0,0,336,342,5,34,0,0,337,341,8,1,0,0,338,339,5,92,0,0,339,
        341,5,34,0,0,340,337,1,0,0,0,340,338,1,0,0,0,341,344,1,0,0,0,342,
        340,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,342,1,0,0,0,345,
        346,5,34,0,0,346,56,1,0,0,0,347,348,5,91,0,0,348,58,1,0,0,0,349,
        350,5,93,0,0,350,60,1,0,0,0,351,352,5,123,0,0,352,62,1,0,0,0,353,
        354,5,125,0,0,354,64,1,0,0,0,355,356,5,47,0,0,356,357,5,47,0,0,357,
        361,1,0,0,0,358,360,8,2,0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,
        359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,361,1,0,0,0,364,
        365,6,32,0,0,365,66,1,0,0,0,366,370,5,10,0,0,367,368,5,13,0,0,368,
        370,5,10,0,0,369,366,1,0,0,0,369,367,1,0,0,0,370,68,1,0,0,0,371,
        373,7,3,0,0,372,371,1,0,0,0,373,374,1,0,0,0,374,372,1,0,0,0,374,
        375,1,0,0,0,375,376,1,0,0,0,376,377,6,34,0,0,377,70,1,0,0,0,11,0,
        289,306,316,327,332,340,342,361,369,374,1,6,0,0
    ]

class SlrLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    METHID = 22
    FORMAT = 23
    LN = 24
    BOOLEAN = 25
    NUMBER = 26
    DIGIT = 27
    STRING = 28
    LB = 29
    RB = 30
    LCB = 31
    RCB = 32
    COMMENT = 33
    NEWLINE = 34
    WS = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'topic '", "'search'", "'query'", "','", "'year_range'", "'to'", 
            "'max_results'", "'filters'", "'exclude_keywords'", "'min_pages'", 
            "'languages'", "'analyze'", "'summarize'", "'method'", "'max_length'", 
            "'extract_fields'", "'keyword_cloud'", "'report'", "'format'", 
            "'include_metadata'", "'output_path'", "'['", "']'", "'{'", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "METHID", "FORMAT", "LN", "BOOLEAN", "NUMBER", "DIGIT", "STRING", 
            "LB", "RB", "LCB", "RCB", "COMMENT", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "METHID", "FORMAT", "LN", "BOOLEAN", "NUMBER", 
                  "DIGIT", "STRING", "LB", "RB", "LCB", "RCB", "COMMENT", 
                  "NEWLINE", "WS" ]

    grammarFileName = "Slr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


